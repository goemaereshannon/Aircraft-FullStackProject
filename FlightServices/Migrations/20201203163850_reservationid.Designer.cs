// <auto-generated />
using System;
using FlightServices.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FlightServices.Migrations
{
    [DbContext(typeof(FlightServicesContext))]
    [Migration("20201203163850_reservationid")]
    partial class reservationid
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FlightServices.Models.Airplane", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalSeats")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Airplanes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9579b6cd-cad5-4608-88a6-270ce03f5a35"),
                            Name = "KL1730",
                            TotalSeats = 200,
                            Type = "Embraer 190"
                        },
                        new
                        {
                            Id = new Guid("9e17af7b-df05-4c69-94b8-586659c7152f"),
                            Name = "BA2490",
                            TotalSeats = 200,
                            Type = "Boeing 737 MAX"
                        });
                });

            modelBuilder.Entity("FlightServices.Models.Departure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Departures");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4a3d26c2-1665-4281-b87b-2538e2a02459"),
                            LocationId = new Guid("c9693b96-3985-4dd5-872b-13b0d3b46f91")
                        },
                        new
                        {
                            Id = new Guid("0ae2e025-10a8-4437-8a5b-9ddffc77c180"),
                            LocationId = new Guid("13afe0e4-58da-472e-93f2-4cc67a771143")
                        },
                        new
                        {
                            Id = new Guid("79a86c66-f7e4-4bc4-9e01-525ad78754bd"),
                            LocationId = new Guid("97705f2e-526c-4a26-b240-c2dce5aeccc5")
                        });
                });

            modelBuilder.Entity("FlightServices.Models.Destination", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Destinations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("120dfa74-5a34-42df-8c5d-345e3ec82458"),
                            LocationId = new Guid("c9693b96-3985-4dd5-872b-13b0d3b46f91")
                        },
                        new
                        {
                            Id = new Guid("628b89e3-ffd4-4659-ba39-c67eee11672b"),
                            LocationId = new Guid("13afe0e4-58da-472e-93f2-4cc67a771143")
                        },
                        new
                        {
                            Id = new Guid("476f0b19-1a84-4e38-a864-9465944423b7"),
                            LocationId = new Guid("97705f2e-526c-4a26-b240-c2dce5aeccc5")
                        });
                });

            modelBuilder.Entity("FlightServices.Models.Flight", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AirplaneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DepartureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DestinationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Distance")
                        .HasColumnType("real");

                    b.Property<string>("FlightStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeOfArrival")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeOfDeparture")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AirplaneId");

                    b.HasIndex("DepartureId");

                    b.HasIndex("DestinationId");

                    b.ToTable("Flights");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d470123f-7795-4158-aa2b-9088e29de88d"),
                            AirplaneId = new Guid("9e17af7b-df05-4c69-94b8-586659c7152f"),
                            DepartureId = new Guid("79a86c66-f7e4-4bc4-9e01-525ad78754bd"),
                            DestinationId = new Guid("628b89e3-ffd4-4659-ba39-c67eee11672b"),
                            Distance = 0f,
                            FlightStatus = "On time",
                            TimeOfArrival = new DateTime(2020, 12, 15, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeOfDeparture = new DateTime(2020, 12, 15, 16, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("33478a6b-437f-4416-932d-638b1c0415ea"),
                            AirplaneId = new Guid("9579b6cd-cad5-4608-88a6-270ce03f5a35"),
                            DepartureId = new Guid("0ae2e025-10a8-4437-8a5b-9ddffc77c180"),
                            DestinationId = new Guid("120dfa74-5a34-42df-8c5d-345e3ec82458"),
                            Distance = 0f,
                            FlightStatus = "On time",
                            TimeOfArrival = new DateTime(2020, 12, 15, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            TimeOfDeparture = new DateTime(2020, 12, 15, 15, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("FlightServices.Models.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Airport")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c9693b96-3985-4dd5-872b-13b0d3b46f91"),
                            Airport = "CDG",
                            City = "Paris",
                            Country = "France"
                        },
                        new
                        {
                            Id = new Guid("13afe0e4-58da-472e-93f2-4cc67a771143"),
                            Airport = "BRU",
                            City = "Brussels",
                            Country = "Belgium"
                        },
                        new
                        {
                            Id = new Guid("97705f2e-526c-4a26-b240-c2dce5aeccc5"),
                            Airport = "JFK",
                            City = "New York",
                            Country = "United States of America"
                        });
                });

            modelBuilder.Entity("FlightServices.Models.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("FlightServices.Models.PriceClass", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Prices");
                });

            modelBuilder.Entity("FlightServices.Models.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FlightId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FlightId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("FlightServices.Models.ReservedSeat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PriceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReservationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SeatId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("PriceId");

                    b.HasIndex("ReservationId");

                    b.HasIndex("SeatId");

                    b.ToTable("ReservedSeats");
                });

            modelBuilder.Entity("FlightServices.Models.Seat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AirplaneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AirplaneId");

                    b.ToTable("Seats");
                });

            modelBuilder.Entity("FlightServices.Models.Departure", b =>
                {
                    b.HasOne("FlightServices.Models.Location", "Location")
                        .WithMany("Departures")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FlightServices.Models.Destination", b =>
                {
                    b.HasOne("FlightServices.Models.Location", "Location")
                        .WithMany("Destinations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FlightServices.Models.Flight", b =>
                {
                    b.HasOne("FlightServices.Models.Airplane", "Airplane")
                        .WithMany("Flights")
                        .HasForeignKey("AirplaneId");

                    b.HasOne("FlightServices.Models.Departure", "Departure")
                        .WithMany("Flights")
                        .HasForeignKey("DepartureId");

                    b.HasOne("FlightServices.Models.Destination", "Destination")
                        .WithMany("Flights")
                        .HasForeignKey("DestinationId");
                });

            modelBuilder.Entity("FlightServices.Models.Reservation", b =>
                {
                    b.HasOne("FlightServices.Models.Flight", "Flight")
                        .WithMany("Reservations")
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FlightServices.Models.ReservedSeat", b =>
                {
                    b.HasOne("FlightServices.Models.Person", "Person")
                        .WithMany("ReservedSeats")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlightServices.Models.PriceClass", "Price")
                        .WithMany("ReservedSeats")
                        .HasForeignKey("PriceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlightServices.Models.Reservation", "Reservation")
                        .WithMany("ReservedSeats")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlightServices.Models.Seat", "Seat")
                        .WithMany("ReservedSeats")
                        .HasForeignKey("SeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FlightServices.Models.Seat", b =>
                {
                    b.HasOne("FlightServices.Models.Airplane", "Airplane")
                        .WithMany("Seats")
                        .HasForeignKey("AirplaneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
